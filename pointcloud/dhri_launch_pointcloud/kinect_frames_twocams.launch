<!-- Default frames for Kinect/PSDK5 devices
     Places depth and RGB cameras in the same plane with 2.5cm baseline.
     Calibration may improve results, but these defaults are reasonably accurate.
-->
<launch>
  <rosparam command="load" file="$(find ckinect_calibration_stereo)/ckinect_calibration_stereo.yaml" />

  <arg name="pi/2" value="1.5707963267948966" />
  <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />

  <arg name="camera1_height" value="ckinect/calibration/camera1_height" />
  <arg name="camera1_pitch" value="/ckinect/calibration/camera1_pitch" />
  <arg name="camera1_roll" value="/ckinect/calibration/camera1_roll" />
  <arg name="camera2_height" value="/ckinect/calibration/camera2_height" />
  <arg name="camera2_pitch" value="/ckinect/calibration/camera2_pitch" />
  <arg name="camera2_roll" value="/ckinect/calibration/camera2_roll" />
  <arg name="camera12_x" value="/ckinect/calibration/camera12_x" />
  <arg name="camera12_y" value="/ckinect/calibration/camera12_y" />
  <arg name="camera12_yaw" value="/ckinect/calibration/camera12_yaw" />


  <node pkg="tf" type="static_transform_publisher" name="camera1_base"
        args="0 0 0 0 0 0  /origin /camera1_ground 100" />    
  <node pkg="tf" type="static_transform_publisher" name="camera2_base"
        args="$(arg camera12_x) $(arg camera12_y) 0 $(arg camera12_yaw) 0 0  /origin /camera2_ground 100" />  

  <node pkg="tf" type="static_transform_publisher" name="camera1_base_link0"
        args="0 0 $(arg camera1_height) 0 $(arg camera1_pitch) $(arg camera1_roll) /camera1_ground /camera1_link 100" />    
  <node pkg="tf" type="static_transform_publisher" name="camera2_base_link0"
        args="0 0 $(arg camera2_height) 0 $(arg camera2_pitch) $(arg camera2_roll)  /camera2_ground /camera2_link 100" />  

  <node pkg="tf" type="static_transform_publisher" name="camera1_base_link"
        args="0 -0.02  0 0 0 0  /camera1_link /camera1_depth_frame 100" />  
  <node pkg="tf" type="static_transform_publisher" name="camera1_base_link1"
        args="0 -0.045 0 0 0 0  /camera1_link /camera1_rgb_frame 100" />  
  <node pkg="tf" type="static_transform_publisher" name="camera1_base_link2"
        args="$(arg optical_rotate) /camera1_depth_frame /camera1_depth_optical_frame  100" />  
  <node pkg="tf" type="static_transform_publisher" name="camera1_base_link3"
        args="$(arg optical_rotate) /camera1_rgb_frame /camera1_rgb_optical_frame 100" />  

  <node pkg="tf" type="static_transform_publisher" name="camera2_base_link"
        args="0 -0.02  0 0 0 0  /camera2_link /camera2_depth_frame 100" />  
  <node pkg="tf" type="static_transform_publisher" name="camera2_base_link1"
        args="0 -0.045 0 0 0 0  /camera2_link /camera2_rgb_frame 100" />  
  <node pkg="tf" type="static_transform_publisher" name="camera2_base_link2"
        args="$(arg optical_rotate) /camera2_depth_frame /camera2_depth_optical_frame  100" />  
  <node pkg="tf" type="static_transform_publisher" name="camera2_base_link3"
        args="$(arg optical_rotate) /camera2_rgb_frame /camera2_rgb_optical_frame 100" />  
</launch>

<!-- TODO Could instead store these in camera_pose_calibration format for consistency
     with user calibrations. Blocked on camera_pose_calibration having sane dependencies. -->
